# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

variables:

  # Azure Resource Manager connection created during pipeline creation
  # azureSubscription: ${{ secrets.AZURE_SUBSCRIPTION }}
  azureSubscription: '0744afce-0a56-4ff2-bfd2-eb6e4d2f446c'

  # Web app name
  webAppName: 'csperando-blog-rest'

  # Environment name
  environmentName: 'csperando-blog-rest'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '19.x'
      displayName: 'Install Node.js'

    - script: |
        set NODE_ENV=prod
        set rest_port=${{ variables.rest_port }}
        set jwt_key=${{ variables.jwt_key }}
        set rest_mongo_prefix='mongodb+srv://'
        set rest_mongo_user=${{ variables.REST_MONGO_USER }}
        set rest_mongo_password=${{ variables.REST_MONGO_PASSWORD }}
        set rest_mongo_host='@cluster0.1lrnz.mongodb.net/'
        set rest_mongo_db='blog'
        set rest_mongo_db_dev='blog_dev'
        set rest_mongo_db_test='blog_test'
        set rest_mongo_params='?retryWrites=true&w=majority'
      displayName: 'Setup .env vars'

    - script: |
        npm install
        npm run build --if-present
      displayName: 'npm install, build and test'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: csperando-blog-rest'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              startUpCommand: 'npm run start'
              